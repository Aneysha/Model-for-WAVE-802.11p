%RICIAN FADING Channel(Urban Approaching LOS):

function [outsignal,Response_FN] = RICIANChannelUrbanLOS(insignal)
avg_pathgain = [0 -8 -10 -15];
path_delay = [0 117 183 333]*1e-9;
doppler_shift = [0 236 -157 492];
K_factor = [1e12 0 0 0];
samp_rate = 10*1e6;
Max_doppler_shift= max(abs(doppler_shift));
doppler_spectrum = cell(size(doppler_shift));
doppler_spectrum{1} = doppler('Asymmetric Jakes',[-.02 .02]);
doppler_spectrum{2} = doppler('Asymmetric Jakes',sort([0 doppler_shift(2)/Max_doppler_shift]));
doppler_spectrum{3} = doppler('Asymmetric Jakes',sort([0 doppler_shift(3)/Max_doppler_shift]));
doppler_spectrum{4} = doppler('Asymmetric Jakes',sort([0 doppler_shift(4)/Max_doppler_shift]));

ricianchan = comm.RicianChannel(...
    'FadingTechnique','Filtered Gaussian noise',...
    'SampleRate',samp_rate,...
    'PathDelays',path_delay,...
    'AveragePathGains',avg_pathgain,...
    'KFactor',K_factor,...
    'DirectPathDopplerShift',doppler_shift,...
    'DirectPathInitialPhase',zeros(size(K_factor)),...
    'MaximumDopplerShift',Max_doppler_shift,...
    'DopplerSpectrum',doppler_spectrum,...
    'PathGainsOutputPort',true);

[outsignal, ~] = step(ricianchan,insignal(:));
Response_FN = fft(outsignal) ./ fft(transpose(insignal));
end
